{{- if and (not .Values.secretName) (not .Values.disablePrivateKeyManagement)  }}
{{- /* Only needed if a secret isn't provided */}}

{{- /* Create role for the hook job so it can create a secret */}}
{{- /* In plain terms this role will be able to create a secret with a certain name in the namespace*/}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Release.Name }}-secret-creator
  labels:
    {{- include "wireguard.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/resource-policy": delete
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get"]
  resourceNames: ["{{ .Release.Name }}-wg-generated"]
{{- /* Need a service account for the job/hook */}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Release.Name }}-pre-install-job-sa
  labels:
    {{- include "wireguard.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/resource-policy": keep
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
{{- /* Need to bind the service account to the role */}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-hook-create-secret
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "wireguard.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
    "helm.sh/resource-policy": delete
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
subjects:
- kind: ServiceAccount
  name:  {{ .Release.Name }}-pre-install-job-sa
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role 
  name: {{ .Release.Name }}-secret-creator
  apiGroup: rbac.authorization.k8s.io
{{- /* A script to generate the private key and create the secret is required */}}
{{- /* A config map with the script is used to mount into a generic alpine container with kubectl already installed */}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-wg-gen-scripts
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "wireguard.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
    "helm.sh/resource-policy": delete
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
data:
{{ (.Files.Glob "scripts/*").AsConfig | indent 2 }}
{{- if .Values.keygenJob.extraScripts }}
{{- range $key, $value := .Values.keygenJob.extraScripts }}
  {{- $key | nindent 2 }}: |
    {{- $value | nindent 4 }}
  {{- end }}
{{- end }}
{{- /* Create a job that cleans up after 5 minutes that creates the secret since the user didn't provide one*/}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-wg-gen"
  namespace: "{{ .Release.Namespace }}"
  labels:
    {{- include "wireguard.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
    "helm.sh/resource-policy": delete
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  ttlSecondsAfterFinished: 60
  template:
    metadata:
        {{- if .Values.keygenJob.podAnnotations }}
      annotations:
        {{- range $key, $value := .Values.keygenJob.podAnnotations  }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
    spec:
      {{- include "wireguard.runtimeClass" . | indent 6 }}
      serviceAccountName: {{ .Release.Name }}-pre-install-job-sa
      restartPolicy: Never
      securityContext: {{ .Values.keygenJob.podSecurityContext | toYaml | nindent 8 }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: script
          configMap:
            name: {{ .Release.Name }}-wg-gen-scripts
            items:
              - key: gen-key.sh
                path: entry-point.sh
                mode: 0755
              {{- range $key, $value := .Values.keygenJob.extraScripts }}
              - key: {{ $key }}
                path: {{ $key }}
                mode: 0755
              {{- end }}
      containers:
      - name: keygen-job
        {{- if not .Values.keygenJob.useWireguardManager }}
        volumeMounts:
          - name: script
            mountPath: /job/
        image: "{{ .Values.keygenJob.image.repository }}:{{ .Values.keygenJob.image.tag }}"
        imagePullPolicy: "{{ .Values.keygenJob.image.pullPolicy }}"
        {{- else }}
        image: "{{ .Values.keygenJob.wireguardMgrImage.repository }}:{{ .Values.keygenJob.wireguardMgrImage.tag }}"
        imagePullPolicy: "{{ .Values.keygenJob.wireguardMgrImage.pullPolicy }}"
        {{- end }}
        securityContext: {{ .Values.keygenJob.containerSecurityContext | toYaml | nindent 10 }}
        resources: {{ .Values.keygenJob.resources | toYaml | nindent 10 }}
        env:
          {{- if .Values.keygenJob.useWireguardManager }}
          - name: K8S_WG_MGR_SERVER_SECRET_NAME
          {{- else }}
          - name: SECRET_NAME
          {{- end }}
            value: "{{ .Release.Name }}-wg-generated"
          - name: RELEASE_NAMESPACE
            value: "{{ .Release.Namespace }}"
          - name: RELEASE_NAME
            value: "{{ .Release.Name }}"
          {{- range $key, $value := .Values.keygenJob.extraEnv }}
          - name: {{ $key }}
            value: {{ tpl $value $ | quote }}
          {{- end }}
          {{- range $key, $value := .Values.keygenJob.extraEnvSecrets }}
          - name: {{ $key }}
            valueFrom:
              secretKeyRef:
                name: {{ tpl $value.secretName $ }}
                key: {{ tpl $value.secretPropertyName $ }}
          {{- end }}
        {{- if not .Values.keygenJob.useWireguardManager }}
        command: {{ .Values.keygenJob.command | toYaml | nindent 10}}
        {{- end }}
{{- end }}
