{{- define "execprobe" -}}
exec:
  command:
  - /bin/sh
  - -c
  - 'ip link show dev wg0 | grep -s up'
{{- end -}}

{{- define "core.securitycontext" -}}
{{ include "wireguard.seccompProfile" . }}
capabilities:
  drop:
    - ALL
  add:
    - NET_ADMIN
    - NET_RAW
    - SETUID
    - SETGID
{{- end -}}

{{- define "wg.securitycontext" -}}
{{ include "core.securitycontext" . }}
runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default true }}
runAsUser: {{ .Values.securityContext.runAsUser | default 1000 }}
readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem | default true }}
allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation | default true }}
privileged: {{ .Values.securityContext.privileged | default false }}
{{- end -}}

{{- define "init.securitycontext" -}}
{{ include "core.securitycontext" . }}
runAsNonRoot: false
privileged: true
{{- end -}}

---
apiVersion: apps/v1
{{- if .Values.daemonSet }}
kind: DaemonSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: "{{ .Release.Name }}-wireguard"
  labels:
    role: vpn
    {{- if .Values.labels }}
    {{- range $key, $value := .Values.labels  }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    {{- end }}

spec:
  {{- if and (not .Values.autoscaling.enabled) (not .Values.daemonSet) }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-wireguard"
  {{- if not .Values.daemonSet }}
  {{- if eq .Values.deploymentStrategy.type "RollingUpdate" }}
  strategy: {{ .Values.deploymentStrategy | toYaml | nindent 4 }}
  {{- else }}
  strategy:
    type: {{ .Values.deploymentStrategy.type }}
  {{- end }}
  {{- end }}
  template:
    metadata:
      annotations:
        {{- if not .Values.configSecretName }}
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.podAnnotations }}
        {{- range $key, $value := .Values.podAnnotations  }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      labels:
        app: "{{ .Release.Name }}-wireguard"
        role: vpn
        {{- if .Values.labels }}
        {{- range $key, $value := .Values.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
    spec:
      {{- include "wireguard.runtimeClass" . | indent 6 }}
      {{- if .Values.dnsPolicy }}
      dnsPolicy: {{ .Values.dnsPolicy }}
      {{- end }}
      {{- if .Values.dnsConfig }}
      dnsConfig: {{ .Values.dnsConfig | toYaml | nindent  8 }}
      {{- end }}
      serviceAccountName: {{ .Release.Name }}-sa
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: "{{ .Release.Name }}-wireguard"
          {{- if semverCompare ">=1.27-0" .Capabilities.KubeVersion.GitVersion }}
          matchLabelKeys:
            - pod-template-hash
          {{- end }}
      automountServiceAccountToken: {{ .Values.healthSideCar.enabled }}
      {{- if .Values.runPodOnHostNetwork }}
      hostNetwork: true
      {{- end }}
      securityContext:
        fsGroup: {{ .Values.securityContext.runAsUser | default 1000 }}
        fsGroupChangePolicy: "OnRootMismatch"
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default true }}
        {{- include "wireguard.seccompProfile" . | indent 8 }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: "{{ .Values.image.pullSecret }}"
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- $affinity := .Values.affinity | toYaml }}
        {{ tpl $affinity . | nindent 8 | trim }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{ .Values.nodeSelector | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{ .Values.tolerations | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        - name: sysctls
          image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
          command:
          - sh
          - -c
          - sysctl -w net.ipv4.ip_forward=1 && sysctl -w net.ipv4.conf.all.forwarding=1
          securityContext: {{ include "init.securitycontext" . | nindent 12 }}
          resources: {{ .Values.initContainer.resources | toYaml | nindent 12 }}
      containers:
        - name: wireguard
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          ports:
          - containerPort: 51820
            protocol: UDP
            name: wireguard
            {{- if .Values.useHostPort }}
            hostPort: {{ .Values.hostPort }}
            {{- end }}
          env:
          - name: LOG_LEVEL
            value: {{ default "info" .Values.logLevel }}
          {{- range $key, $value := .Values.extraEnv }}
          - name: {{ $key }}
            value: {{ (tpl $value $) | quote }}
          {{- end }}
          {{- range $key, $value := .Values.extraEnvSecrets }}
          - name: {{ $key }}
            valueFrom:
              secretKeyRef:
                name: {{ tpl $value.secretName $ }}
                key: {{ tpl $value.secretPropertyName $ }}
          {{- end }}
          securityContext: {{ include "wg.securitycontext" . | nindent 12 }}
          resources: {{ .Values.resources | toYaml | nindent 12 }}
          startupProbe: {{ include "execprobe" . | nindent 12 }}
            periodSeconds: 2
            failureThreshold: 15
          readinessProbe: {{ include "execprobe" . | nindent 12 }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe: {{ include "execprobe" . | nindent 12 }}
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
          - name: run
            mountPath: /run
          {{- if not .Values.disableConfigManagement }}
          - name: config
            mountPath: /etc/wireguard/wg0.conf
            subPath: {{ .Values.configSecretProperty | quote }}
          {{- end }}
          {{- if not .Values.disablePrivateKeyManagement }}
          - name: privatekey
            mountPath: /etc/wireguard/privatekey
            subPath: privatekey
          {{- end }}
          {{- if .Values.volumeMounts }}
            {{- .Values.volumeMounts | toYaml | nindent 10 }}
          {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: wireguard-exporter
          image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: "{{ .Values.metrics.image.pullPolicy }}"
          args:
            - -a
            {{- if .Values.metrics.extraEnv.PROMETHEUS_WIREGUARD_EXPORTER_PREPEND_SUDO_ENABLED }}
            - "true"
            {{- else }}
            - "false"
            {{- end }}
          ports:
          - containerPort: {{ .Values.metrics.service.port }}
            protocol: TCP
            name: exporter
          env:
          {{- range $key, $value := .Values.metrics.extraEnv }}
          - name: {{ $key }}
            value: {{ (tpl $value $) | quote }}
          {{- end }}
          - name: PROMETHEUS_WIREGUARD_EXPORTER_PORT
            value: "{{ .Values.metrics.service.port }}"
          securityContext: {{ include "wg.securitycontext" . | nindent 12 }}
          resources: {{ .Values.metrics.resources | toYaml | nindent 12 }}
          startupProbe:
            httpGet:
              path: /metrics
              port: {{ .Values.metrics.service.port }}
            periodSeconds: 2
            failureThreshold: 15
          readinessProbe:
            httpGet:
              path: /metrics
              port: {{ .Values.metrics.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /metrics
              port: {{ .Values.metrics.service.port }}
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
          - name: run
            mountPath: /run
          {{- if not .Values.disableConfigManagement }}
          - name: config
            mountPath: /etc/wireguard/wg0.conf
            subPath: {{ .Values.configSecretProperty | quote }}
          {{- end }}
          {{- if not .Values.disablePrivateKeyManagement }}
          - name: privatekey
            mountPath: /etc/wireguard/privatekey
            subPath: privatekey
          {{- end }}
          {{- if .Values.volumeMounts }}
            {{- .Values.volumeMounts | toYaml | nindent 10 }}
          {{- end }}
        {{- end }}
        {{- if .Values.healthSideCar.enabled }}
        - name: health
          image: "{{ .Values.healthSideCar.image.repository }}:{{ .Values.healthSideCar.image.tag }}"
          imagePullPolicy: "{{ .Values.healthSideCar.image.pullPolicy }}"
          resources: {{ .Values.healthSideCar.resources | toYaml | nindent 12 }}
          securityContext: {{ .Values.healthSideCar.securityContext | toYaml | nindent 12 }}
          ports:
            - containerPort: 3000
              protocol: TCP
              name: wg-health-ep
              {{- if .Values.healthSideCar.useHostPort }}
              hostPort: {{ .Values.healthSideCar.hostPort }}
              {{- end }}
        {{- end }}
        {{- if .Values.extraSideCars }}
        {{- .Values.extraSideCars | toYaml | nindent 8 }}
        {{- end }}
      volumes:
      - name: run
        emptyDir: {}
      {{- if not .Values.disableConfigManagement }}
      - name: config
        secret:
          secretName: "{{ coalesce .Values.configSecretName (printf "%s-wg-config" .Release.Name) }}"
      {{- end }}
      {{- if not .Values.disablePrivateKeyManagement }}
      - name: privatekey
        secret:
          secretName: "{{ coalesce .Values.secretName (printf "%s-wg-generated" .Release.Name) }}"
      {{- end }}
      {{- if .Values.volumes }}
        {{- .Values.volumes | toYaml | nindent 6 }}
      {{- end }}
